Bitwise OR (|)

int value1 = 6;
int value2 = 5;
int result = value1 | value2;

0110
0101
-----
0111 = 7

Bitwise AND (&)
int value1 = 6;
int value2 = 5;
int result = value1 & value2;

0110
0101
-----
0100 = 4

Bitwise XOR (^)
int value1 = 6;
int value2 = 5;
int result = value1 ^ value2;

0110
0101
-----
0011 = 3

Bitwise COMPLEMENT (~)
Bitwise Not or Complement operator simply means the negation of each bit of the input value. It takes
only one integer and it's equivalent to the ! operator.

int value1 = 6;
int result = ~value1;

value1 = 0000 0110
By applying the complement operator, the result will be:
0000 0110 -> 1111 1001


This is the one’s complement of the decimal number 6. And since the first (leftmost) bit is 1 in binary, it means that the sign
is negative for the number that is stored.Now, since the numbers are stored as 2’s complement, first we need to find its 2’s
complement and then convert the resultant binary number into a decimal number:

1111 1001 -> 0000 0110 + 1 -> 0000 0111
Finally, 0000 0111 is 7 in decimal. Since the sign bit was 1 as mentioned above, therefore the resulting answer is:
result : -7

--------------------------------------------------------------------------------------------------------------------------
Signed Left Shift [<<]
The left shift operator shifts the bits to the left by the number of times specified by the right side of the operand.
After the left shift, the empty space in the right is filled with 0.

Another important point to note is that shifting a number by one is equivalent to multiplying it by 2, or, in general,
left shifting a number by n positions is equivalent to multiplication by 2^n.

Let's take the value 12 as the input value.

Now, we will move it by 2 places to the left (12 <<2) and see what will be the final result.

The binary equivalent of 12 is 00001100. After shifting to the left by 2 places, the result is 00110000, which is
equivalent to 48 in decimal:

@Test
public void givenOnePositiveInteger_whenLeftShiftOperator_thenNewDecimalNumber() {
    int value = 12;
    int leftShift = value << 2;
    assertEquals(48, leftShift);
}
This works similarly for a negative value:

@Test
public void givenOneNegativeInteger_whenLeftShiftOperator_thenNewDecimalNumber() {
    int value = -12;
    int leftShift = value << 2;
    assertEquals(-48, leftShift);
}
4.2. Signed Right Shift [>>]
The right shift operator shifts all the bits to the right. The empty space in the left side is filled depending on the input number:

When an input number is negative, where the leftmost bit is 1, then the empty spaces will be filled with 1
When an input number is positive, where the leftmost bit is 0, then the empty spaces will be filled with 0
Let's continue the example using 12 as input.

Now, we will move it by 2 places to the right(12 >>2) and see what will be the final result.

The input number is positive, so after shifting to the right by 2 places, the result is 0011, which is 3 in decimal:

@Test
public void givenOnePositiveInteger_whenSignedRightShiftOperator_thenNewDecimalNumber() {
    int value = 12;
    int rightShift = value >> 2;
    assertEquals(3, rightShift);
}
Also, for a negative value:

@Test
public void givenOneNegativeInteger_whenSignedRightShiftOperator_thenNewDecimalNumber() {
    int value = -12;
    int rightShift = value >> 2;
    assertEquals(-3, rightShift);
}

Unsigned Right Shift [>>>]
This operator is very similar to the signed right shift operator. The only difference is that the empty spaces in the left are
 filled with 0 irrespective of whether the number is positive or negative. Therefore, the result will always be a positive integer.
Let's right shift the same value of 12:

@Test
public void givenOnePositiveInteger_whenUnsignedRightShiftOperator_thenNewDecimalNumber() {
    int value = 12;
    int unsignedRightShift = value >>> 2;
    assertEquals(3, unsignedRightShift);
}
And now, the negative value:

@Test
public void givenOneNegativeInteger_whenUnsignedRightShiftOperator_thenNewDecimalNumber() {
    int value = -12;
    int unsignedRightShift = value >>> 2;
    assertEquals(1073741821, unsignedRightShift);
}